# @cigvincev
import os
import json
import requests
import pandas as pd
import time
from matplotlib import pyplot as plt
# from collections import Counter #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é
import seaborn as sns
import numpy as np
import io
# import csv #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é

import asyncio
import logging
from aiogram import Bot, Dispatcher, types

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import text, bold, italic, code, pre #–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è 

from contextlib import suppress #–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ 

from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound) #–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
from PIL import Image
# from datetime import datetime #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é

from wordcloud import WordCloud

"""
–ë–æ—Ç-–ø–∞—Ä—Å–µ—Ä HeadHunter 
–ö–æ–Ω—Ç–∞–∫—Ç—ã @cigvincev
"""

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())
storage = MemoryStorage() #–¥–ª—è —Ä–∞–±–æ—Ç—ã FSM

# –•–µ–Ω–¥–ª–µ—Ä—ã
# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
async def start(message: types.Message, state: FSMContext):
    
    await message.reply(
        '–ü—Ä–∏–≤–µ—Ç, {}!  –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HeadHunter. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫), –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç". –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–æ—Å–∫–≤–∞" –∏–ª–∏ "junior —Ç–µ—Å—Ç–∏—Ä–æ–≤—à–∏–∫ —Å–∞–º–∞—Ä–∞". –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ /help '.format(
            message.from_user.first_name))
    await message.reply('–í–Ω–∏–º–∞–Ω–∏–µ! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, –±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç üòâ')

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV /csv
async def csv_download(message: types.Message, state: FSMContext):
    message_text = '–ß—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å csv —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. \n–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ HH –∏ –∞–Ω–∞–ª–∏–∑–∞, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∏—Ç—å CSV. \n–ü–æ–¥—Ä–æ–±–Ω–µ–µ - –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help'
    data = await state.get_data() #–ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ FSM
    test_control=data.get('test_control') #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Ö —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á–∞–º
        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏           
    def vac_len_control(vac_name, k=60):
        if len(vac_name)>k:
            return vac_name[:k]+'...'
        else: 
            return vac_name

    

    if test_control==0:
        await message.reply('–û—à–∏–±–∫–∞')
    elif test_control=='test':
        z=data.get('z') #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Ö —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á–∞–º
        vac_name=data.get('vac_name') #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Ö —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á–∞–º
        t_date=data.get('t_date') #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Ö —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á–∞–º
        f_date=data.get('f_date') #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Ö —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á–∞–º
        def df_to_csv2(z):
            buf = io.BytesIO()
            z.to_csv(buf)
            buf.seek(0)
            # –∑–∞–¥–∞–µ–º –∏–º—è
            buf.name = f'{vac_name[:30]}_{f_date}-{t_date}.csv'
            return buf
        
        await types.ChatActions.upload_document() # –¥–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ –≥—Ä—É–∑–∏–º –¥–æ–∫
        await asyncio.sleep(3)  # –∂–¥–µ–º 3 —Å–µ–∫
        await message.answer_document(document=types.InputFile(df_to_csv2(z)), caption=f'–¥–∞—Ç–∞—Å–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac_len_control(vac_name, 70)}')
        await state.finish()
    else:
        await message.reply(message_text)
        # await state.finish()
    # await message.reply(some_info)

# –ü–æ–º–æ—â—å   /help 
async def helpcommand(message: types.Message, state: FSMContext):
    s = '''üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫), –Ω–∞–ø—Ä–∏–º–µ—Ä, 
"–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç".
–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 
"–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–æ—Å–∫–≤–∞" 
–∏–ª–∏ "junior —Ç–µ—Å—Ç–∏—Ä–æ–≤—à–∏–∫ —Å–∞–º–∞—Ä–∞".
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: 
‚òëÔ∏è –±–æ—Ç —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è, –≥–¥–µ –≥—Ä–µ–π–¥ –∞ –≥–¥–µ –ª–æ–∫–∞—Ü–∏—è (—Ö–æ—Ç—è –±—ã–≤–∞—é—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è);
‚òëÔ∏è –±–æ—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ (–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –±—É–¥–µ—Ç –∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞);
‚òëÔ∏è –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ HH (–Ω–∞–ø—Ä–∏–º–µ—Ä: "(–∞–Ω–∞–ª–∏—Ç–∏–∫ OR Data analyst) not "1C", not "–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫" not "—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫" DESCRIPTION:SQL, Excel, Python");
‚òëÔ∏è –±–æ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ NET (—Å—Ç–∞–≤–∫–∞ –ù–î–§–õ –¥–ª—è –†–§), –≤ —Ä—É–±–ª—è—Ö –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ –Ω–∞ –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è;
‚òëÔ∏è –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–¥–∞—á–∏ –≤ CSV (–Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –∑–∞–ø—Ä–æ—Å–∞).
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–æ—Ç–∞: 
‚ùóÔ∏è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–¥–∞—á–∏ –Ω–µ –±–æ–ª–µ–µ 2000 –≤–∞–∫–∞–Ω—Å–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ hh);
‚ùóÔ∏è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API HH –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –ü–æ—ç—Ç–æ–º—É, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç –º–æ–∂–µ—Ç –¥—É–º–∞—Ç—å –¥–æ ~20 —Å–µ–∫.

–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python, —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API HH, "—Ö–æ—Å—Ç–∏—Ç—Å—è" –Ω–∞ Yandex Cloud (serverless).

–û—Ç–∑—ã–≤—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –Ω–∞ @cigvincev 


'''
# ps 
    s1 = text('–î–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫), –Ω–∞–ø—Ä–∏–º–µ—Ä, ',
        code('–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'),
         '\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, ',
        code('–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–æ—Å–∫–≤–∞'),
        ' –∏–ª–∏ ',
        code('junior —Ç–µ—Å—Ç–∏—Ä–æ–≤—à–∏–∫ —Å–∞–º–∞—Ä–∞'),
        ' (–¥–∞–ª—å—à–µ –±–æ—Ç —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è, –≥–¥–µ –≥—Ä–µ–π–¥ –∞ –≥–¥–µ –ª–æ–∫–∞—Ü–∏—è).\n',
        '–ó–∞—Ä–ø–ª–∞—Ç—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã NET, –≤ —Ä—É–±–ª—è—Ö –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ –Ω–∞ –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è.\n',
        '–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python, —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API HH, "—Ö–æ—Å—Ç–∏—Ç—Å—è" –Ω–∞ Yandex Cloud (serverless).\n',
        '(!) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–æ—Ç–∞: –º–∞–∫–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–¥–∞—á–∏ –Ω–µ –±–æ–ª–µ–µ 2000 –≤–∞–∫–∞–Ω—Å–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ hh).\n',
        italic('\n ps —Ç—É—Ç –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞'))

    await message.reply(s)


async def echo(message: types.Message, state: FSMContext):
    # await message.answer(message.text)
    vac_name = message.text
    def vac_len_control(vac_name, k=60):
        if len(vac_name)>k:
            return vac_name[:k]+'...'
        else: 
            return vac_name
    first_message = await message.answer(f'–ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{vac_len_control(vac_name, 150)}", –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    await types.ChatActions.upload_photo()
    # await types.ChatActions.TYPING
    # –±–ª–æ–∫ –Ω–æ–º–µ—Ä –æ–¥–∏–Ω
    # sent = await bot.send_message(...)
    # –ò–ª–∏ 
    # sent = await msg.answer(...)
    
    # await asyncio.sleep(10)
    # await message.delete()
    # vac_name = message.text
    # var_message_answer = message.answer() 
    # var_msg_id = var_message_answer.message_id
     
    url = 'https://api.hh.ru/vacancies'
    vac_input = 'NAME:' + vac_name[:300]
    parametrs = {
        'text': vac_input,  # –¢–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        #           'area': 1, # –ü–æ–∏—Å–∫ –æ—â—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤–∞
        'per_page': 100,  # –ö–æ–ª-–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        'responses_count_enabled': True,  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
        'only_with_salary': True  # —Ç–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–ø
        #         ,'date_from': 2022-08-02  #—Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –±—É–±–ª–∏–∫–∞—Ü–∏–∏–∏(–æ—Ç)
    }
    # –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –Ω–æ–º–µ—Ä –æ–¥–∏–Ω
    # –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –Ω–æ–º–µ—Ä –¥–≤–∞
    page, k, vacancy = 0, 0, pd.DataFrame()
    for page_number in range(0, 20):  # —Å 0 –¥–æ 20 - –≤—Å–µ —Ä–∞–≤–Ω–æ HH –±–æ–ª—å—à–µ 2000 (20*100) –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –æ—Ç–¥–∞—Å—Ç
        parametrs['page'] = page_number
        req = requests.get(url=url,
                           params=parametrs)
        res = req.json()
        k = len(vacancy) + len(res['items'])
        vacancy = pd.concat([vacancy, pd.DataFrame(res['items'])])
        if len(res['items']) < 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
            # print('–£–∂–µ —Å–∫–∞—á–∞–Ω–æ',len(res['items']),'–≤–∞–∫–∞–Ω—Å–∏–π')
            break
            # print('–£–∂–µ —Å–∫–∞—á–∞–Ω–æ',k,'–≤–∞–∫–∞–Ω—Å–∏–π')
        time.sleep(0.5)  # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    if len(vacancy) != 0:
        # await message.answer(len(vacancy)) #–º–∞—Ä–∫–µ—Ä
        # –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë–†–§
        data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()  # –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë–†–§

# –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏===================================================================================
        vacancy['type'] = vacancy['area'].apply(lambda x: x['name'])  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏
        # vacancy['city_id'] = vacancy['area'].apply(lambda x: x['id']) #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º ID –≥–æ—Ä–æ–¥–∞
        vacancy['city'] = vacancy['area'].apply(lambda x: x['name'])  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ì–û–†–û–î
        # vacancy['city_url'] = vacancy['area'].apply(lambda x: x['url'])
        # vacancy['employers_name'] = vacancy['schedule'].apply(lambda x: x['name'])
        # vacancy['text'] = map(lambda x: x.get('text', ''), vacancy['salary'])
        vacancy['employers_name'] = vacancy['employer'].apply(lambda x: str(x['name']))  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª—è
        vacancy['requirements'] = vacancy['snippet'].apply(
            lambda x: str(x['requirement']))  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é
        vacancy['requirements']=vacancy['requirements'].replace({'<highlighttext>':'',
                                                   '</highlighttext>':''}, regex=True) # —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏
        vacancy['responsibility'] = vacancy['snippet'].apply(
            lambda x: str(x['responsibility']))  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é
        vacancy['responsibility']=vacancy['responsibility'].replace({'<highlighttext>':'',
                                                   '</highlighttext>':''}, regex=True) # —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏
        vacancy['schedule_type'] = vacancy['schedule'].apply(lambda x: str(x['name']))  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        vacancy['lat'] = vacancy['address'].apply(lambda x: '' if x==None else str(x['lat'])) #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —â–∏—Ä–æ—Ç—É
        vacancy['lng'] = vacancy['address'].apply(lambda x: '' if x==None else str(x['lng'])) #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–æ–ª–≥–æ—Ç—É
        # —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        dict=data['Valute'] #–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–≤–∞—Ä—é —Å –∫—É—Ä—Å–∞–º–∏ —Ü–±
        def cbrf_salary(x,dict):    #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–ª—é—Ç
            if x in dict.keys():
                salary_change_k=dict[x]['Value']/dict[x]['Nominal']
            elif x=='BYR':
                salary_change_k=dict['BYN']['Value']/dict['BYN']['Nominal']
            elif x=='RUR':
                salary_change_k=1
            elif x=='GEL':
                salary_change_k=35 # –ø–∞–ª–∫–∞, –Ω–æ —á—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å))
            else:
                salary_change_k=1
            return salary_change_k 
        #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–æ—Å—Å –∏–ª–∏ –Ω–µ—Ç
        vacancy['gross_coef'] = vacancy['salary'].apply(lambda x: 0.87 if x['gross']==True else 1)
        #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–∞–ª—é—Ç—É –ó–ü
        vacancy['salary_currency'] = vacancy['salary'].apply(lambda x: x['currency']) #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–∞–ª—é—Ç—É –ó–ü
        # —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ—ç—Ñ.–ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–ª—é—Ç
        vacancy['salary_change_k'] = vacancy.apply(lambda x: cbrf_salary(x['salary_currency'], data['Valute']), axis =  1)
        # —Å—á–∏—Ç–∞–µ–º –æ—Ç
        vacancy['salary_from'] = vacancy['salary'].apply(lambda x: x['from'])*vacancy['salary_change_k']
        # —Å—á–∏—Ç–∞–µ–º –¥–æ
        vacancy['salary_to'] = vacancy['salary'].apply(lambda x: x['to'])*vacancy['salary_change_k']
        # –ø—Ä–∏–º–µ–Ω—è–µ–º gross
        vacancy['salary_from']=vacancy['salary_from']*vacancy['gross_coef'] 
        vacancy['salary_to']=vacancy['salary_to']*vacancy['gross_coef']


        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
        vacancy['responses_count'] = vacancy['counters'].apply(lambda x: x['responses'])
        vacancy['created_at']=pd.to_datetime(vacancy['created_at'])
        vacancy['published_at'] =pd.to_datetime(vacancy['published_at'])
        # vacancy.head()
        # vacancy['id'].nunique()
        # await message.answer('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ!') #—Ç–µ—Å—Ç–æ–≤–æ–µ
        z = vacancy[
            ['id', 'name', 'city', 'employers_name', 'schedule_type', 'salary_from', 'salary_to', 'responses_count',
             'published_at', 'created_at', 'requirements', 'responsibility','lat','lng','salary_currency']]

        if np.isnan(z['salary_from'].quantile(0.5))==True:
            f_median='-'
            f_min='-'
        else:
            f_median=round(z['salary_from'].quantile(0.5))
            f_min=round(z['salary_from'].min())
        if np.isnan(z['salary_to'].quantile(0.5))==True:
            t_median='-'
            t_max='-'
        else:
            t_median=round(z['salary_to'].quantile(0.5))
            t_max=round(z['salary_to'].max())
        #     –¥–∞—Ç—ã –±—É–±–ª–∏–∫–∞—Ü–∏–π
        f_date=str(z['published_at'].min())[0:10] #–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # f_date=z['published_at'].min().to_pydatetime().strftime('%d.%m.%y') —Ö–∑ —á–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        t_date=str(z['published_at'].max())[0:10] #–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        

        def sklonenie(i): #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–æ–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤–∞–∫–∞–Ω—Å–∏(–∏,—è,–π)
            d,h=i%10,i%100
            if d==1 and h!=11:
                s="—è"
            elif 1<d<5 and not 11<h<15:
                s="–∏"
            else:
                s="–π"
            return(s)
        l = ('–í–°–ï–ì–û ' + str(len(vacancy)) + ' –≤–∞–∫–∞–Ω—Å–∏'+sklonenie(len(vacancy))+'. \n–ó–∞—Ä–ø–ª–∞—Ç–∞ (–º–µ–¥–∏–∞–Ω–Ω–∞—è, net) –æ—Ç ' + str(f_median) + ' –¥–æ ' + str(
            t_median) + ' —Ä—É–±. \n–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /csv' )
        # await message.answer(l)
        
        # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∞—è –≥—Ä–∞—Ñ–∏–∫
        def fig2img(fig):
            buf = io.BytesIO()
            fig.savefig(buf)                
            buf.seek(0)
            img = Image.open(buf)
            return img
        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏           
        def vac_len_control(vac_name, k=60):
            if len(vac_name)>k:
                return vac_name[:k]+'...'
            else: 
                return vac_name

#=============================================================================================================
#–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø=== –≥—Ä–∞—Ñ–∏–∫ (–±–∞—Ä) –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ 10 –∑–∞—Ä–ø–ª–∞—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ —Å—É–º–º–µ –æ—Ç–∫–ª–∏–∫–æ–≤
        def bar_with_popular_employers(z,vac_name):
            z2=z.groupby('employers_name')['responses_count'].sum().reset_index().sort_values(
                by="responses_count",
                ascending=False
                ).reset_index().head(10).copy()
            y,z99=z2['responses_count'],0
            figure, ax = plt.subplots(figsize=(12, 7))
            
            plt.title(label=f'–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É \n{vac_len_control(vac_name, 70)}', loc='center', size=12, pad=10) # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.barh(z2['employers_name'], 
                    z2['responses_count'],
                    tick_label=z2['employers_name'].astype(str).str[:50]
            #         textposition = 'outside', cliponaxis = False
                    )
            # plt.tight_layout()
            plt.gca().invert_yaxis()
            if z2['responses_count'].max()!=0:
                for i, v in enumerate(z2['responses_count']):
                    plt.text(v , i + 0.1, ' '+str(v), color='black',horizontalalignment='left',fontstyle='italic')
                    z99+=1
            # z99=0    v+1
            # for i, v in enumerate(z2['responses_count']):
            #     plt.text(v+1, i + 0.1,'–æ—Ç '+str(k[z99])+' ‚ÇΩ', color='black',horizontalalignment='left')
            #     z99+=1
            plt.xlabel(f'—Å—É–º–º–∞ —á–∏—Å–ª–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ \n @hh_analytics_bot')
            if z2['responses_count'].max()!=0:
                ax.set_xlim([-1*(z2['responses_count'].max()/15), z2['responses_count'].max()+(z2['responses_count'].max()/5)])
                plt.tight_layout() #–æ–±—Ä–µ–∑–∞–µ–º –∫–∞–∫ –Ω–∞–¥–æ
            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf()
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf7 = io.BytesIO()
            img.save(buf7, 'PNG')
            buf7.seek(0)
            return buf7
        
# –†–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π == –≥—Ä–∞—Ñ–∏–∫ (–±–∞—Ä) 10 –∑–∞—Ä–ø–ª–∞—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        def bar_with_count_employers(z,vac_name):
            z2=z.groupby('employers_name')['responses_count'].count().reset_index().sort_values(
                by="responses_count",
                ascending=False
                ).reset_index().head(10).copy()
            
            y,z99=z2['responses_count'],0
            figure, ax = plt.subplots(figsize=(12, 7))
            
            plt.title(label=f'–†–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ \n{vac_len_control(vac_name, 70)}', loc='center', size=12, pad=10) # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.barh(z2['employers_name'], 
                    z2['responses_count'],
                    tick_label=z2['employers_name'].astype(str).str[:50]
            #         textposition = 'outside', cliponaxis = False
                    )
            # plt.tight_layout()
            plt.gca().invert_yaxis()
            for i, v in enumerate(z2['responses_count']):
                plt.text(v , i + 0.1, ' '+str(v), color='black',horizontalalignment='left',fontstyle='italic')
                z99+=1
            # z99=0     v+0.01
            # for i, v in enumerate(z2['responses_count']):
            #     plt.text(v+1, i + 0.1,'–æ—Ç '+str(k[z99])+' ‚ÇΩ', color='black',horizontalalignment='left')
            #     z99+=1
            if z2['responses_count'].max()!=0:
                ax.set_xlim([-1*(z2['responses_count'].max()/15), z2['responses_count'].max()+(z2['responses_count'].max()/5)])
            plt.xlabel(f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π \n @hh_analytics_bot')
            plt.tight_layout() #–æ–±—Ä–µ–∑–∞–µ–º –∫–∞–∫ –Ω–∞–¥–æ
            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf()
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf7 = io.BytesIO()
            img.save(buf7, 'PNG')
            buf7.seek(0)
            return buf7
                

# –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ–∫—Å–ø–ª–æ—Ç —Å –∑–ø –æ—Ç –∏ –¥–æ
        def boxpot_vacancy_from_to(z,vac_name,f_median,t_median,f_min,t_max,f_date,t_date):
            # –≥—Ä–∞—Ñ–∏–∫–∏
            plt.figure(figsize=(5, 9))  # –ó–∞–¥–∞–¥–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
            plt.title(label=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ \n{vac_len_control(vac_name, 35)}', loc='center', size=14, pad=15)  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.grid()  # –î–æ–±–∞–≤–∏–º —Å–µ—Ç–∫—É

            # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            # box_plot = sns.boxplot(data=f.loc[(f['salary_from']<f['salary_from'].quantile(0.99))&(f['salary_to']<f['salary_to'].quantile(0.99))],
            #             palette='Set3')
            box_plot = sns.boxplot(data=z[['salary_from', 'salary_to']],
                                palette='coolwarm')
            # ax = sns.swarmplot(data=f.loc[(f['salary_from']<100000)&(f['salary_to']<100000)],
            #                    color='lightgrey')
            plt.ylabel('–†–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã (net), —Ä—É–±.')  # –ü–æ–¥–ø–∏—à–µ–º –æ—Å—å Y
            # medians = f['salary_from'].median()
            # vertical_offset = f['salary_from'].median() * 0.05 # offset from median for display
            # for xtick in box_plot.get_xticks():
            #     box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick],
            #             horizontalalignment='center',size='x-small',color='w',weight='semibold')
            # plt.xlabel(round(f['salary_from'].quantile(0.5),1)) # –ü–æ–¥–ø–∏—à–µ–º –æ—Å—å Y

            plt.xlabel(
                f'–º–µ–¥–∏–∞–Ω–∞: {f_median} —Ä—É–±.  –º–µ–¥–∏–∞–Ω–∞: {t_median} —Ä—É–±. \n min: {f_min} —Ä—É–±. max: {t_max} —Ä—É–±. \n (c {f_date} –ø–æ {t_date})\n @hh_analytics_bot')

            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf() #–æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf = io.BytesIO()
            img.save(buf, 'PNG')
            buf.seek(0)
            return buf
        # bio_image=buf.getvalue()

# –≥—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        def grafik_vac_in_time(z):
            z4=z.copy()
            z4['published_at2']=z4['published_at'].dt.floor("D")
            z4=z4.groupby(z4['published_at2'])['id'].count().reset_index()
            # import matplotlib.dates as mdates
            fig, ax = plt.subplots(figsize=(15, 7))
            published_at2_min=z4['published_at2'].min().strftime('%d.%m.%Y')
            published_at2_max=z4['published_at2'].max().strftime('%d.%m.%Y')
            plt.title(label=f'–ì—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ \n{vac_len_control(vac_name, 120)} \n(—Å {published_at2_min} –ø–æ {published_at2_max})', loc='center', size=12, pad=10) # –∑–∞–≥–æ–ª–æ–≤–æ–∫

            #####
            # import matplotlib.ticker as mticker
            ######
            plt.plot(z4['published_at2'],z4['id'],'-o')
            ax.set_xticks(z4['published_at2']) #–Ω–∞–∑–Ω–∞—á–∏–º —Å–≤–æ–∏ —Ç–∏–∫–∏
            ax.set_xlabel('@hh_analytics_bot')
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
            
            fig.autofmt_xdate(rotation=45) 
            plt.grid(True) #—Å–µ—Ç–æ—á–∫–∞
            plt.tight_layout() #–æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            # plt.figure(figsize=(12, 7))
            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf() 
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf = io.BytesIO()
            img.save(buf, 'PNG')
            buf.seek(0)
            return buf

        # –µ—â–µ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        
#–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é –∏–Ω–¥–∏–π—Å–∫–∏–π –∫–æ–¥, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —á–∏—Å—Ç–∏–º DF
        def popular_word_requirements(z):
            df2=z['requirements'].reset_index()
            df2['requirements']=df2['requirements'].str.lower()
            df2['requirements']=df2['requirements'].replace({'!':'',
                                                            ',':'',
                                                            '<':'',
                                                            '>':'',
                                                            ' –Ω–∞ ':' ',
                                                            ' —Å ':' ',
                                                            ' –∏ ':' ',
                                                            ' –∏–ª–∏ ':' ',
                                                            ' –ª–∏–±–æ ':' ',
                                                            ' –≤—Å–µ—Ö ':' ',
                                                            '–Ω–∞–≤—ã–∫.':' ',
                                                            '–ø–æ–Ω–∏–º–∞–Ω–∏–µ':' ',
                                                            ' –∫ ':' ',
                                                            ' –æ—Ç ':' ',
                                                            ' –∏–∑ ':' ',
                                                            '—É–º–µ–Ω–∏–µ':'',
                                                            '—Ä–∞–±–æ—Ç—ã':' ',
                                                            '—Ä–∞–±–æ—Ç–∞—Ç—å':' ',
                                                            '–∑–Ω–∞–Ω–∏–µ':' ',
                                                            '–∑–Ω–∞–Ω–∏—è':' ',
                                                            '–æ–ø—ã—Ç ':' ',
                                                            'highlighttext':' ',
                                                            'index':' ',
                                                            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':' ',
                                                            '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ':' ',
                                                            '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º':' ',
                                                            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':' ',
                                                            '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è':' ',
                                                            'requirements':' ',
                                                            'index':' ',
                                                            'requirements0':' ',
                                                            ' –≤ ':' '}, regex=True)
            text = df2.to_string()
            text = text.replace('\n', '') # —É–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã
            text = text.replace('requirements', '') # —É–¥–∞–ª—è–µ–º 
            text = text.replace('index', '') # —É–¥–∞–ª—è–µ–º 
            text = text.replace(')', ' ') # —É–¥–∞–ª—è–µ–º 
            text = text.replace('(', ' ') # —É–¥–∞–ª—è–µ–º 
            text = text.replace('.', ' ') # —É–¥–∞–ª—è–µ–º 
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
            def plot_cloud(wordcloud):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
                plt.figure(figsize=(20, 30))
                # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                plt.imshow(wordcloud) 
                # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                plt.axis("off")
                plt.title(label=f'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é', loc='center', size=14, pad=15)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–∞–∫–æ —Å–ª–æ–≤
            plt.figure(figsize=(7, 11))  # –ó–∞–¥–∞–¥–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
            plt.title(label=f'–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏\n{vac_len_control(vac_name, 60)}', loc='center', size=14, pad=15)  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            wordcloud = WordCloud(width = 600, 
                                height = 1200, 
                                random_state=1, 
                                background_color='white', 
                                margin=10, 
                                colormap='coolwarm', 
                                collocations=False, 
            #                       stopwords = STOPWORDS_RU
                                ).generate(text)

            plt.axis("off")
            plt.text(400, 1220, '@hh_analytics_bot',fontsize=12, color='coral'); # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –≥—Ä–∞—Ñ–∏–∫—É 
            plt.imshow(wordcloud)
            plt.tight_layout()
            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf()
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf2 = io.BytesIO()
            img.save(buf2, 'PNG')
            buf2.seek(0)
            return buf2
        
#–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–∞—Ä —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏=================================================================
        def bar_with_popular_vac(z):
            z_df=z.sort_values(
                by="responses_count",
                ascending=False
                ).reset_index().head(10)
            k=list(z_df['salary_from'])
            k2=list(z_df['salary_to'])
            for i in range(len(k)):
                if np.isnan(k[i])==True:
                    if np.isnan(k2[i])==True:
                        k[i]='- '
                    else:
                        k[i]=('–¥–æ '+str(round(k2[i]))+' ‚ÇΩ ')    
                else: 
                    k[i]=('–æ—Ç '+str(round(k[i]))+' ‚ÇΩ ')
            # ff=z_df['salary_from']+z_df['employers_name']
            y,z=z_df['responses_count'],0
            plt.figure(figsize=(12, 7))
            plt.title(label=f'–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ \n{vac_len_control(vac_name, 55)}', loc='center', size=12, pad=10) # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.barh(z_df['id'], z_df['responses_count'],tick_label=z_df['name'].astype(str).str[:40]+'... ('+z_df['employers_name'].astype(str).str[:30]+')')
            plt.xlabel(f'—á–∏—Å–ª–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é \n @hh_analytics_bot')
            
            plt.gca().invert_yaxis()
            #–¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–∞ (—Ç–µ—Å—Ç)
            for i, v in enumerate(z_df['responses_count']):
                if z_df['responses_count'].max()/(v+1)>2.2:
                    plt.text(v, i + 0.1,(len(str(v))*' ')+'     '+k[z], color='black',horizontalalignment='left',fontstyle='italic')
                else:
                    plt.text(v, i + 0.1,k[z]+' ', color='white',horizontalalignment='right',fontstyle='italic')
                z+=1
            for i, v in enumerate(z_df['responses_count']):
                plt.text(v, i + 0.1,' '+str(v), color='red',horizontalalignment='left')
                z+=1


            #–¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ - –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            # for i, v in enumerate(z_df['responses_count']):
            #     plt.text(v - 0, i + 0.1,k[z], color='white',horizontalalignment='right',fontstyle='italic')
            #     z+=1
            # for i, v in enumerate(z_df['responses_count']):
            #     plt.text(v, i + 0.1,' '+str(v), color='red',horizontalalignment='left')
            #     z+=1
            plt.tight_layout() #–æ–±—Ä–µ–∑–∞–µ–º –∫–∞–∫ –Ω–∞–¥–æ
            # —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fig = plt.gcf()
            img = fig2img(fig)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∏—É–µ–º PIL –≤ –±–∞–π—Ç–æ–≤—ã–µ
            buf3 = io.BytesIO()
            img.save(buf3, 'PNG')
            buf3.seek(0)
            return buf3

#—Å–æ–æ–±—â–µ–Ω–∏—è ===============================================================================
        await types.ChatActions.upload_photo()
        # await types.ChatActions.typing()
        
        # Create media group
        media = types.MediaGroup()
        # Attach local file
        
        media.attach_photo(types.InputFile(boxpot_vacancy_from_to(z,vac_name,f_median,t_median,f_min,t_max,f_date,t_date)), l)
        media.attach_photo(types.InputFile(popular_word_requirements(z)))
        media.attach_photo(types.InputFile(bar_with_popular_vac(z)))
        media.attach_photo(types.InputFile(bar_with_popular_employers(z,vac_name)))
        media.attach_photo(types.InputFile(bar_with_count_employers(z,vac_name)))
        media.attach_photo(types.InputFile(grafik_vac_in_time(z)))
        
        


        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        await message.reply_media_group(media=media)
        
        #—É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
            await first_message.delete()
        # —Å—Ç–∞—Ä–æ–µ –∫–æ–º–º–µ–Ω—Ç–∏–º
        # await message.answer_photo(photo=types.InputFile(bar_with_popular_vac(z)), caption='–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –æ—Ç–∑—ã–≤–∞–º')
        # await message.answer_photo(photo=types.InputFile(boxpot_vacancy_from_to(z,vac_name,f_median,t_median,f_min,t_max,f_date,t_date)), caption=l)
        # await message.answer_photo(photo=types.InputFile(popular_word_requirements(z)), caption='–û–±–ª–∞–∫–æ —Å–ª–æ–≤-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π')
        # —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä 2
        # def df_to_csv(z,vac_name):
        #     test_data=z.to_csv()
        #     s = io.StringIO()
        #     csv.writer(s).writerows(test_data)
        #     s.seek(0)
        #     # python-telegram-bot library can send files only from io.BytesIO buffer
        #     # we need to convert StringIO to BytesIO
        #     buf = io.BytesIO()
        #     # extract csv-string, convert it to bytes and write to buffer
        #     buf.write(s.getvalue().encode())
        #     buf.seek(0)
        #     # set a filename with file's extension
        #     buf.name = f'vacancy.csv'
        #     return buf
        
        # def df_to_csv_BIO(z): #–ø–ª–æ—Ö–æ–π –∫–æ–¥
        #     buf5 = io.BytesIO()
        #     ## compression_opts = dict(method='zip', archive_name='out.csv')  # doctest: +SKIP
        #     ## df.to_csv('out.zip', index=False, compression=compression_opts)  # doctest: +SKIP
        #     z.to_csv(buf5)
        #     return buf5.seek(0)


        # await message.answer('–ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏')

        # await bot.send_photo(message.from_user.id, img,
        #                  caption='–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ',
        #                  reply_to_message_id=message.message_id)
        # await bot.send_photo(chat_id=message.from_user.id, photo=img)

#–±–ª–æ–∫ —Å –∑–∞–ø–∏—Å—å—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ FSM - –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Ö –≤ –¥—Ä—É–≥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
        test_control='test'
        
        await state.update_data(test_control=test_control)
        await state.update_data(z=z)
        await state.update_data(vac_name=vac_name)
        await state.update_data(t_date=t_date)
        await state.update_data(f_date=f_date)

#=====================================================

#  ====================================      
        # data = await state.get_data()
        # some_info2=data.get('some_info')
        
        # if some_info2==0:
        #     await message.reply('–†–∞–≤–Ω–æ 0')
        # elif some_info2=='test':
        #     await message.reply('–í—Å–µ –Ω–∞—à–ª–æ—Å—å')
        # else:
        #     await message.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å')
# # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç—ã ==================================== 
        # await state.finish()



    else:
        await message.answer('–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help')
        
        #—É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await first_message.delete()
    # –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –Ω–æ–º–µ—Ä –¥–≤–∞

    # if message.text == '–∞–Ω–∞–ª–∏—Ç–∏–∫':
    #     await message.answer('–ü—Ä–∏–≤–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º ;) ')
    # else:
    # await message.answer('–ø—Ä–æ—Å—Ç–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ else')


async def unknown_message(message: types.Message, state: FSMContext):
    message_text = '–û–π, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –≤—ã –æ—à–∏–±–ª–∏—Å—å —á–∞—Ç–æ–º - –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. \n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help'

    await message.reply(message_text)


# –§—É–Ω–∫—Ü–∏–∏ Yandex.Cloud
async def register_handlers(dp: Dispatcher):
    """Registration all handlers before processing update."""

    dp.register_message_handler(start, commands=['start'], state='*')
    dp.register_message_handler(helpcommand, commands=['help'], state='*')
    dp.register_message_handler(csv_download, commands=['csv'], state='*')
    
    dp.register_message_handler(echo, state='*')
    dp.register_message_handler(unknown_message, content_types=types.ContentTypes.ANY)

    log.debug('Handlers are registered.')


async def process_event(event, dp: Dispatcher):
    """
    Converting an Yandex.Cloud functions event to an update and
    handling tha update.
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))

    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)


async def handler(event, context):
    """Yandex.Cloud —Ö–µ–Ω–¥–ª–µ—Ä """

    if event['httpMethod'] == 'POST':
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–∞—Ç—á–µ—Ä
        bot = Bot(os.environ.get('TOKEN'))
        
        dp = Dispatcher(bot, storage=storage) #storage=storage –¥–ª—è —Ä–∞–±–æ—Ç—ã FSM


        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}
    return {'statusCode': 405}
